<?php

// todo: test class factory when providing a file name
/**
 * Test class for PHPDS.
 * Generated by PHPUnit on 2011-07-25 at 11:26:17.
 */
class PHPDSTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var PHPDS
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @todo Implement test__destruct().
     */
    public function test__destruct()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }


    /**
     * @todo Implement testLoadFunctions().
     */
    public function testLoadFunctions()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testRun().
     */
    public function testRun()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement test_factory().
     */
    public function test_factory()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testPHPDS_configuration().
     */
    public function testPHPDS_configuration()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testPHPDS_errorHandler().
     */
    public function testPHPDS_errorHandler()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testPHPDS_core().
     */
    public function testPHPDS_core()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testPHPDS_user().
     */
    public function testPHPDS_user()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testPHPDS_debug().
     */
    public function testPHPDS_debug()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testLog().
     */
    public function testLog()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement test_log().
     */
    public function test_log()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testPHPDS_navigation().
     */
    public function testPHPDS_navigation()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testPHPDS_db().
     */
    public function testPHPDS_db()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testPHPDS_security().
     */
    public function testPHPDS_security()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testPHPDS_template().
     */
    public function testPHPDS_template()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testPHPDS_tagger().
     */
    public function testPHPDS_tagger()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testPHPDS_notif().
     */
    public function testPHPDS_notif()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testPHPDS_lang().
     */
    public function testPHPDS_lang()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGet().
     */
    public function testGet()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIsEmbedded().
     */
    public function testIsEmbedded()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testBasepath().
     */
    public function testBasepath()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSneak_class().
     */
    public function testSneak_class()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSneakClass().
     */
    public function testSneakClass()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testPHPDS_autoloader().
     */
    public function testPHPDS_autoloader()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                        'This test has not been implemented yet.'
        );
    }

    public function testConfigFile()
    {
        /* @var TEST_main $PHPDS */
        $PHPDS = TEST_main::instance();
        $conf = array();

        $this->assertFalse($PHPDS->includeConfigFile('', $conf));
        $this->assertFalse($PHPDS->includeConfigFile('/test_phpds-fake-path', $conf));
        $missing_files = $conf['config_files_missing'];
        $this->assertEquals('/test_phpds-fake-path', $missing_files[0]);

        $this->assertFalse($PHPDS->loadConfigFile('', $conf));
    }

    public function testCopyArray()
    {
        /* @var TEST_main $PHPDS */
        $PHPDS = TEST_main::instance();

        $from = array(
          'one' => 'un',
            'two' => 'deux',
            'three' => 'trois',
            'four' => 'quatre',
            'zero' => 0
        );

        $to = array();
        $PHPDS->copyArray($from, $to, array('one', 'three'));
        $this->assertEquals(array('one' => 'un', 'three' => 'trois'), $to);

        $to = array();
        $PHPDS->copyArray($from, $to, array('four', 'three', 'zero'));
        $this->assertEquals(array('four' => 'quatre', 'three' => 'trois', 'zero' => 0), $to);

        $to = array();
        $PHPDS->copyArray($from, $to, array('one', 'zero', 'three'), 'boolean');
        $this->assertEquals(array('one' => true, 'zero' => false, 'three' => true), $to);

    }
}

?>
