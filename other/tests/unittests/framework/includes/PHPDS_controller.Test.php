<?php

if (!defined('BASEPATH')) die("\nDon't forget the bootstrap!!\n\n");

require_once BASEPATH.'/includes/PHPDS_controller.class.php';
	


class TEST_controllerStub extends PHPDS_controller
{
	public function ajaxSomeRemoteFunction($post)
	{
		// silly really
		$result = is_integer($post) ? $post * 2 : "$post x $post";
		
		return $result;
	}
	
	public function execute()
	{
		// this is not a "real life" test, we're not trying to test the controller's output like in a real situation
		// we're testing the method's return value
		return 'regular';
	}
	
	public function viaAJAX()
	{
		// this is not a "real life" test, we're not trying to test the controller's output like in a real situation
		// we're testing the method's return value
		return 'ajax';
	}

	public function metaGET($key, $value)
	{
		$this->_GET[$key] = $value;
	}
}


/**
 * Test class for PHPDS_controller.
 * Generated by PHPUnit on 2011-08-09 at 01:06:29.
 */
class PHPDS_controllerTest extends PHPUnit_Framework_TestCase
{

	/**
	 * @var PHPDS_controller
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$PHPDS = TEST_main::instance();
		$this->object = $PHPDS->_factory('PHPDS_controller');

		$_POST = array('post' => 10);
		$_GET = array('get' => 20);

		$this->object->construct();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		// phpunit expects an open buffer after that
		ob_start();
	}

	public function testConstruct_DoesInitialize()
	{
		$_REQUEST = null;
		$_POST = null;
		$_GET = null;

		$this->object->construct();

		$this->assertAttributeInternalType(PHPUnit_Framework_Constraint_IsType::TYPE_ARRAY, '_POST', $this->object);
		$this->assertAttributeInternalType(PHPUnit_Framework_Constraint_IsType::TYPE_ARRAY, '_GET', $this->object);
	}

	public function testConstruct_DoesClear()
	{
		$_REQUEST = array('_SESSION' => true, 'test' => true);
		$_POST = array('post' => 10);
		$_GET = array('get' => 20);

		$this->object->construct();

		$this->assertTrue(empty($_REQUEST['_SESSION']));
		$this->assertTrue(empty($_POST['_SESSION']));
		$this->assertTrue(empty($_GET['_SESSION']));
	}

	public function testConstruct_DoesImport()
	{
		$_REQUEST = array('_SESSION' => true, 'test' => true);
		$_POST = array('post' => 10);
		$_GET = array('get' => 20);

		$this->object->construct();

		$this->assertAttributeInternalType(PHPUnit_Framework_Constraint_IsType::TYPE_ARRAY, '_POST', $this->object);
		$this->assertAttributeInternalType(PHPUnit_Framework_Constraint_IsType::TYPE_ARRAY, '_GET', $this->object);

		$this->assertAttributeEquals(array('post' => 10), '_POST', $this->object);
		$this->assertAttributeEquals(array('get' => 20), '_GET', $this->object);
	}

	public function testPOST()
	{
		$this->assertEquals(array('post' => 10), $this->object->POST());
		$this->assertEquals(10, $this->object->POST('post'));
		$this->assertNull($this->object->POST('nopost'));
		$this->assertEquals('wrong', $this->object->POST('nopost', 'wrong'));
		$this->assertEquals(array('right' => true, 'post' => 10), $this->object->POST(null, array('right' => true)));
	}

	public function testGET()
	{
		$this->assertEquals(array('get' => 20), $this->object->GET());
		$this->assertEquals(20, $this->object->GET('get'));
		$this->assertNull($this->object->GET('noget'));
		$this->assertEquals('wrong', $this->object->GET('noget', 'wrong'));
		$this->assertEquals(array('right' => true, 'get' => 20), $this->object->GET(null, array('right' => true)));
	}

	public function testRun()
	{
		$PHPDS = TEST_main::instance();
		$object = $PHPDS->_factory('TEST_controllerStub');
		$core = $PHPDS->PHPDS_core();
		
		$result = $object->run();
		$this->assertTrue($result);
		$this->assertEquals('regular', $core->data);

		$_SERVER["HTTP_X_REQUESTED_WITH"] = 'XMLHttpRequest';


		$object->core->ajaxType = true;

			$core->data = null;
			$result = $object->run();
			$this->assertTrue($result);
			$this->assertEquals('ajax', $core->data);		

			$object->metaGET('widget', 'test');
			$core->data = null;
			$result = $object->run();
			$this->assertEquals('regular', $result);
			$this->assertNull($core->data);	
			$object->metaGET('ajax', 'test');
			$core->data = null;
			$result = $object->run();
			$this->assertEquals('regular', $result);
			$this->assertNull($core->data);	
			$object->metaGET('lightbox', 'test');
			$core->data = null;
			$result = $object->run();
			$this->assertEquals('regular', $result);
			$this->assertNull($core->data);	

		$object->core->ajaxType = false;

			$core->data = null;
			$result = $object->run();
			$this->assertEquals('regular', $result);
			$this->assertNull($core->data);			

			$object->metaGET('widget', 'test');
			$core->data = null;
			$result = $object->run();
			$this->assertEquals('regular', $result);
			$this->assertNull($core->data);	
			$object->metaGET('ajax', 'test');
			$core->data = null;
			$result = $object->run();
			$this->assertEquals('regular', $result);
			$this->assertNull($core->data);	
			$object->metaGET('lightbox', 'test');
			$core->data = null;
			$result = $object->run();
			$this->assertEquals('regular', $result);
			$this->assertNull($core->data);	
	}
	
	public function testRunAJAX_defaultCall()
	{
        /* @var TEST_main $PHPDS */
		$PHPDS = TEST_main::instance();

		$_SERVER["HTTP_X_REQUESTED_WITH"] = 'XMLHttpRequest';
		$_SERVER["HTTP_X_REQUESTED_TYPE"] = 'json';
        /* @var TEST_controllerStub $object */
		$object = $PHPDS->_factory('TEST_controllerStub');
		$core = $PHPDS->PHPDS_core();

		$result = $object->runAJAX();
		$this->assertTrue($result);
		$data = $core->data;
		$this->assertEquals('"ajax"', $data, "AJAX test remote method didn't return the expected value ($data instead of 20)");
	}
	
	public function testRunAJAX_directCall()
	{
        /* @var TEST_main $PHPDS */
		$PHPDS = TEST_main::instance();
        $configuration = &$PHPDS->PHPDS_configuration();
		$_SERVER["HTTP_X_REQUESTED_WITH"] = 'XMLHttpRequest';
		$_SERVER["HTTP_X_REQUESTED_TYPE"] = 'json';
		$_SERVER["HTTP_X_REMOTE_CALL"] = 'SomeRemoteFunction';
		$object = $PHPDS->_factory('TEST_controllerStub');
		$core = $PHPDS->PHPDS_core();

        $configuration['use_reflection'] = false;
		
		$result = $object->runAJAX();
		$this->assertTrue($result);
		$data = $core->data;
		$this->assertEquals(20, $data, "AJAX test remote method didn't return the expected value ($data instead of 20)");

        $configuration['use_reflection'] = true;

        $result = $object->runAJAX();
        $this->assertTrue($result);
        $data = $core->data;
        $this->assertEquals(20, $data, "AJAX test remote method didn't return the expected value ($data instead of 20)");
	}
	
	public function testRunAJAX_badCall()
	{
		$PHPDS = TEST_main::instance();
		$_SERVER["HTTP_X_REQUESTED_WITH"] = 'XMLHttpRequest';
		$_SERVER["HTTP_X_REQUESTED_TYPE"] = 'json';
		$_SERVER["HTTP_X_REMOTE_CALL"] = 'InexistantFunction';
		$object = $PHPDS->_factory('TEST_controllerStub');
		$core = $PHPDS->PHPDS_core();
		
        $this->setExpectedException('PHPDS_exception');
		$result = $object->runAJAX();
	}
	
	
	public function _testHandleResult($input, $return, $theme, $data)
	{
		$PHPDS = TEST_main::instance();
		$core = $PHPDS->PHPDS_core();
		$core->themeFile = 'testTemplate';
		$core->data = 'testController';
		
		$result = $this->object->handleResult($input);
		// phpunit expects an open buffer after that
		ob_start();
		
		$this->assertTrue($return === $result);
		$this->assertEquals($theme, $core->themeFile);
		$this->assertEquals($data, $core->data);
	}

	public function testHandleResult_PlainRequest()
	{
		$PHPDS = TEST_main::instance();

		$_SERVER["HTTP_X_REQUESTED_WITH"] = null;
		$_SERVER["HTTP_X_REQUESTED_TYPE"] = null;

		// set up the template with fake data and call the method under test
		$template = $PHPDS->PHPDS_template();
		$core = $PHPDS->PHPDS_core();
		$this->assertInstanceOf('PHPDS_template', $template);
		$this->assertInstanceOf('PHPDS_core', $core);

		// test a controller result of false: error
		$this->_testHandleResult(false, false, '', 'testController');

		// test a controller result of null: standard handling
		$this->_testHandleResult(null, true, 'testTemplate', 'testController');
		
		// test a controller result of true: don't do anything
		$this->_testHandleResult(true, true, '', 'testController');

		// test a controller result of bare string: bare output
		$this->_testHandleResult('bare string', true, '', 'bare string');

		// test an invalid controller result
//        $this->setExpectedException('PHPDS_exception');
//		$result = $this->object->handleResult(array('test' => true));
	}

	public function testHandleResult_AjaxRequest()
	{
		$PHPDS = TEST_main::instance();

		$_SERVER["HTTP_X_REQUESTED_WITH"] = 'XMLHttpRequest';
		$_SERVER["HTTP_X_REQUESTED_TYPE"] = null;

		$this->assertTrue(PU_isAJAX());
		$this->assertFalse(PU_isJSON('test'));

		// set up the template with fake data and call the method under test
		$template = $PHPDS->PHPDS_template();
		$core = $PHPDS->PHPDS_core();
		$this->assertInstanceOf('PHPDS_template', $template);
		$this->assertInstanceOf('PHPDS_core', $core);

		// test a controller result of false: error
		$this->_testHandleResult(false, false, '', 'testController');

		// test a controller result of null: standard handling
		$this->_testHandleResult(null, true, 'testTemplate', 'testController');

		// test a controller result of true: don't do anything
		$this->_testHandleResult(true, true, '', 'testController');

		// test a controller result of bare string: bare output
		$this->_testHandleResult('bare string', true, '', 'bare string');

		// test an invalid controller result
//        $this->setExpectedException('PHPDS_exception');
//		$result = $this->object->handleResult(array('test' => true));
	}

	public function testHandleResult_JsonRequest()
	{
		$PHPDS = TEST_main::instance();

		$_SERVER["HTTP_X_REQUESTED_WITH"] = 'XMLHttpRequest';
		$_SERVER["HTTP_X_REQUESTED_TYPE"] = 'json';

		$data = array('test' => true);

		$this->assertTrue(PU_isAJAX());
		$this->assertEquals('{"test":true}', PU_isJSON($data));

		// set up the template with fake data and call the method under test
		$template = $PHPDS->PHPDS_template();
		$core = $PHPDS->PHPDS_core();
		$this->assertInstanceOf('PHPDS_template', $template);
		$this->assertInstanceOf('PHPDS_core', $core);

		// test a controller result of false
		$this->_testHandleResult(false, true, '', 'false');

		// test a controller result of null
		$this->_testHandleResult(null, true, '', 'null');

		// test a controller result of true
		$this->_testHandleResult(true, true, '', 'true');

		// test a controller result of bare string
		$this->_testHandleResult('bare string', true, '', '"bare string"');

		$this->_testHandleResult(array('test' => true), true, '', '{"test":true}');
	}


	public function testset()
	{

		/**
		 * public function set($name, $value=null)
		 * Set data for availability in view class.
		 *
		 * @param string $name
		 * @param mixed $value
		 */
		$controller = $this->object;
		
		$controller->set('foo', 'bar');
		$this->assertEquals('bar', $controller->core->toView['foo']);
		
		$foo = new stdClass(array('bar1', 'bar2'));
		$controller->set('foo', $foo);
		$this->assertEquals($foo, $controller->core->toView->foo);
	}

	public function testP()
	{
		$controller = $this->object;

		$this->assertEquals('10', $controller->P('post'));
		$this->assertEquals('B', $controller->P('b', 'B'));
		$this->assertEquals(array('post' => '10'), $controller->P());
		$this->assertEquals(array('post' => '10', 'b' => 'B'), $controller->P(null, array('b' => 'B')));
	}

	public function testG()
	{
		$controller = $this->object;

		$this->assertEquals('20', $controller->G('get'));
		$this->assertEquals('B', $controller->G('b', 'B'));
		$this->assertEquals(array('get' => '20'), $controller->G());
		$this->assertEquals(array('get' => '20', 'b' => 'B'), $controller->G(null, array('b' => 'B')));
	}


	public function testDummy()
	{
		// this test is only there to comply with code coverage
		$this->object->execute();
		$this->object->viaAJAX();
	}


}

